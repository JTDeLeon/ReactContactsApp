{"version":3,"sources":["ListContacts.js","ImageInput.js","CreateContact.js","utils/ContactsAPI.js","App.js","serviceWorker.js","index.js"],"names":["ListContacts","state","query","updateQuery","setState","trim","clearQuery","showingContacts","this","props","contacts","onDeleteContact","match","RegExp","escapeRegExp","filter","contact","test","name","className","type","placeholder","value","onChange","event","target","to","length","onClick","map","key","id","style","backgroundImage","avatarURL","email","Component","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","handleFileChange","files","then","originalURL","url","handleFormReset","document","createElement","fileInput","form","addEventListener","removeEventListener","position","backgroundRepeat","backgroundPosition","backgroundSize","ref","node","top","left","opacity","React","CreateContact","handleSubmit","e","preventDefault","values","serializeForm","hash","onCreateContact","onSubmit","api","process","REACT_APP_CONTACTS_API_URL","token","localStorage","Math","random","toString","substr","headers","remove","fetch","method","res","json","data","App","removeContact","c","ContactsAPI","body","JSON","stringify","prevState","concat","exact","path","render","history","createContact","push","Boolean","window","location","hostname","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e54e203d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport escapeRegExp from 'escape-string-regexp';\nimport sortBy from 'sort-by';\n\nclass ListContacts extends Component {\n    static propTypes = {\n        contacts : PropTypes.array.isRequired,\n        onDeleteContact : PropTypes.func.isRequired\n    }\n\n    state = {\n        query: ''\n    }\n\n    updateQuery = (query) => {\n        this.setState({ query: query.trim() })\n    }\n\n    clearQuery = () => {\n        this.setState({ query : '' })\n    }\n\n    render() {\n        // Destructuring \n        const { contacts, onDeleteContact } = this.props;\n        const { query } = this.state;\n\n        let showingContacts;\n\n        if(query) {\n            \n            const match = new RegExp(escapeRegExp(query), 'i');\n            showingContacts = contacts.filter((contact)=>{\n               return match.test(contact.name)\n            });\n        } else {\n            showingContacts = contacts;\n        }\n\n        return (\n            \n\n            <div className='list-contacts'>\n                \n                <div className='list-contacts-top'>\n                    \n                    <input \n                        className='search-contacts'\n                        type='text'\n                        placeholder='Search Contacts'\n                        value={query}\n                        onChange={(event) => {this.updateQuery(event.target.value)}}\n                    />\n                    <Link \n                        to='/create'\n                        className='add-contact'\n                     >Add Contact</Link>\n                </div>\n\n                {/* Dynamically Rendering Elements */}\n                {showingContacts.length !== contacts.length && (\n                    <div className='showing-contacts'>\n                        <span>Now shwoing {showingContacts.length} of {contacts.length} total</span>\n                        <button onClick={this.clearQuery}>Show All</button>\n                    </div>\n                )}\n                \n                <ol className='contact-list'>\n                    {showingContacts.map((contact)=>(\n                        <li key={contact.id} className='contact-list-item'>\n                            <div className='contact-avatar' style={{\n                                backgroundImage: `url(${contact.avatarURL})`\n                            }}></div>\n                            <div className='contact-details'>\n                                <p>{contact.name}</p>\n                                <p>{contact.email}</p>\n                            </div>\n                            <button onClick={()=>onDeleteContact(contact)} className='contact-remove'>\n                                Remove\n                            </button>\n                        </li>\n                    ))}\n                </ol>\n                \n            </div>\n        );\n    }\n}\n\n\n\nexport default ListContacts;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst readFileAsDataURL = (file) =>\n  new Promise(resolve => {\n    const reader = new FileReader()\n\n    reader.onload = (event) => {\n      resolve(event.target.result)\n    }\n\n    reader.readAsDataURL(file)\n  })\n\nconst resizeImage = (imageURL, canvas, maxHeight) =>\n  new Promise(resolve => {\n    const image = new Image()\n\n    image.onload = () => {\n      const context = canvas.getContext('2d')\n\n      if (image.height > maxHeight) {\n        image.width *= maxHeight / image.height\n        image.height = maxHeight\n      }\n\n      context.clearRect(0, 0, canvas.width, canvas.height)\n      canvas.width = image.width\n      canvas.height = image.height\n\n      context.drawImage(image, 0, 0, image.width, image.height)\n\n      resolve(canvas.toDataURL('image/jpeg'))\n    }\n\n    image.src = imageURL\n  })\n\n/**\n * A custom <input> that dynamically reads and resizes image files before\n * submitting them to the server as data URLs. Also, shows a preview of the image.\n */\nclass ImageInput extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    name: PropTypes.string,\n    maxHeight: PropTypes.number\n  }\n\n  state = {\n    value: ''\n  }\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0]\n\n    if (file && file.type.match(/^image\\//)) {\n      readFileAsDataURL(file).then(originalURL => {\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\n          this.setState({ value: url })\n        })\n      })\n    } else {\n      this.setState({ value: '' })\n    }\n  }\n\n  handleFormReset = () => {\n    this.setState({ value: '' })\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas')\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\n  }\n\n  componentWillUnmount() {\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\n  }\n\n  render() {\n    const { className, name } = this.props\n    const { value } = this.state\n\n    const style = {\n      position: 'relative'\n    }\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`\n      style.backgroundRepeat = 'no-repeat'\n      style.backgroundPosition = 'center'\n      style.backgroundSize = 'cover'\n    }\n\n    return (\n      <div className={className} style={style}>\n        <input type=\"hidden\" name={name} value={value} />\n        <input\n          ref={node => this.fileInput = node}\n          type=\"file\"\n          onChange={this.handleFileChange}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ImageInput\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport ImageInput from './ImageInput.js';\nimport serializeForm from 'form-serialize';\n\nclass CreateContact extends Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const values = serializeForm(e.target, {hash:true} );\n        // console.log(values)\n        if(this.props.onCreateContact)\n            this.props.onCreateContact(values);\n    }\n\n    render () {\n        return (\n            <div>\n                <Link to=\"/\" className=\"close-create-contact\">\n                    Close\n                </Link>\n\n                <form onSubmit={this.handleSubmit} className=\"create-contact-form\">\n                    <ImageInput\n                        className=\"create-contact-avatar-input\"\n                        name=\"avatarURL\"\n                        maxHeight={64}\n                    />\n                    <div className=\"create-contact-details\">\n                        <input type=\"text\" name=\"name\" placeholder=\"Name\"/>\n                        <input type=\"text\" name=\"email\" placeholder=\"Email\"/>\n                        <button>Add Contact</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default CreateContact;","const api = process.env.REACT_APP_CONTACTS_API_URL || 'http://localhost:5001'\n\nlet token = localStorage.token\n\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const getAll = () =>\n  fetch(`${api}/contacts`, { headers })\n    .then(res => res.json())\n    .then(data => data.contacts)\n\nexport const remove = (contact) =>\n  fetch(`${api}/contacts/${contact.id}`, { method: 'DELETE', headers })\n    .then(res => res.json())\n    .then(data => data.contact)\n\nexport const create = (body) =>\n  fetch(`${api}/contacts`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(res => res.json())\n","import React, {Component} from 'react';\nimport { Route } from 'react-router-dom';\nimport ListContacts from './ListContacts';\nimport CreateContact from './CreateContact'\nimport * as ContactsAPI from './utils/ContactsAPI';\n\n\n\nclass App extends Component {\n\n  state = {\n    contacts: []\n  }\n\n  componentDidMount () {\n    ContactsAPI.getAll().then((contacts)=>{\n      this.setState({ contacts });\n    })\n  }\n\n  removeContact = (contact) => {\n    this.setState((state)=>({\n      contacts: state.contacts.filter((c)=>c.id !== contact.id)\n    }))\n\n    ContactsAPI.remove(contact);\n  }\n\n  createContact(contact) {\n    ContactsAPI.create(contact).then(contact=>{\n      this.setState(prevState => ({\n        contacts : prevState.contacts.concat([contact])\n      }))\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" render={()=>(\n          <ListContacts \n            onDeleteContact={this.removeContact} \n            contacts={this.state.contacts}\n          />\n        )}/>\n\n        <Route path=\"/create\" render={({history})=>(\n          // <CreateContact />\n          <CreateContact \n            onCreateContact={(contact)=>{\n              this.createContact(contact);\n              history.push('/');\n            }}\n            />\n        )}/>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}